name: Build and Push RomPatcher.js Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_URL_API: https://api.github.com/repos/marcrobledo/RomPatcher.js/releases/latest

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v5

      # 2. Fetch latest upstream release
      - name: Get latest upstream release
        id: set_version
        run: |
          LATEST=$(curl -s $REPO_URL_API | jq -r '.tag_name')
          echo "Latest upstream tag: $LATEST"

          if [ -f "VERSION" ]; then
            LAST=$(cat VERSION)
          else
            LAST=""
          fi
          echo "Last built version: $LAST"

          if [ "$LATEST" != "$LAST" ]; then
            echo "New version detected: $LATEST"
            echo "VERSION=$LATEST" >> $GITHUB_ENV
            echo "IS_NEW=true" >> $GITHUB_ENV
          else
            echo "No new version available."
            echo "VERSION=$LATEST" >> $GITHUB_ENV
            echo "IS_NEW=false" >> $GITHUB_ENV
          fi

      # 3. Log in to GitHub Container Registry
      - name: Log in to GHCR
        if: env.IS_NEW == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Build and push Docker image
      - name: Build and push Docker image
        if: env.IS_NEW == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: UPSTREAM_TAG=${{ env.VERSION }}

      # 5. Generate VERSION file and README.md from template
      - name: Generate VERSION and README
        if: env.IS_NEW == 'true'
        run: |
          echo "${VERSION}" > VERSION
          sed "s|{{VERSION}}|${VERSION}|g" README.template.md > README.md

      # 6. Commit VERSION and README.md
      - name: Commit and tag
        if: env.IS_NEW == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add VERSION README.md
          git commit -m "chore: update VERSION and README to ${VERSION}" || echo "No changes"
          git tag -a ${VERSION} -m "Release ${VERSION}" || echo "Tag already exists"
          git remote set-url origin https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin main --tags

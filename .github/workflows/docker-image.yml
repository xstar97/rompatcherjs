name: Build and Push RomPatcher.js Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_URL_API: https://api.github.com/repos/marcrobledo/RomPatcher.js/releases/latest

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v5

      # 2. Fetch latest upstream release
      - name: Get latest upstream release
        id: set_version
        run: |
          LATEST=$(curl -s $REPO_URL_API | jq -r '.tag_name')
          echo "VERSION=$LATEST" >> $GITHUB_ENV
          echo "Latest upstream tag: $LATEST"

      # 3. Validate if tag/image already exists
      - name: Check if Docker image or git tag exists
        run: |
          echo "Checking if GHCR image exists..."
          if curl -s -f -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://ghcr.io/v2/${{ github.repository }}/manifests/${VERSION} > /dev/null; then
            echo "Docker image with tag ${VERSION} already exists. Cancelling workflow."
            exit 1
          fi

          echo "Checking if git tag already exists..."
          if git ls-remote --tags origin refs/tags/${VERSION} | grep -q ${VERSION}; then
            echo "Git tag ${VERSION} already exists. Cancelling workflow."
            exit 1
          fi

      # 4. Log in to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          no-cache: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: UPSTREAM_TAG=${{ env.VERSION }}

      # 6. Update README.md from template
      - name: Update README
        run: |
          sed "s|{{VERSION}}|${VERSION}|g" README.template.md > README.md

      # 7. Commit updated README.md
      - name: Commit README
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md
          git commit -m "chore: update README to ${VERSION}" || echo "No changes"
          git push origin main

name: Update RomPatcher.js Release

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 UTC

jobs:
  check-and-build:
    runs-on: ubuntu-latest
    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Fetch latest upstream release tag
      - name: Get latest upstream release
        id: set_version
        run: |
          # Fetch latest upstream release tag
          LATEST=$(curl -s https://api.github.com/repos/marcrobledo/RomPatcher.js/releases/latest | jq -r '.tag_name')
          echo "Latest upstream tag: $LATEST"

          # Get last built version from VERSION file
          if [ -f "VERSION" ]; then
            LAST=$(cat VERSION)
          else
            LAST=""
          fi
          echo "Last built version: $LAST"

          # Compare versions
          if [ "$LATEST" != "$LAST" ]; then
            echo "New version detected: $LATEST"
            echo "VERSION=$LATEST" >> $GITHUB_ENV
            echo "IS_NEW=true" >> $GITHUB_ENV
          else
            echo "No new version available."
            echo "VERSION=$LATEST" >> $GITHUB_ENV
            echo "IS_NEW=false" >> $GITHUB_ENV
          fi

      # 3. Log in to GitHub Container Registry
      - name: Log in to GHCR
        if: env.IS_NEW == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4. Build and push Docker image
      - name: Build and push Docker image
        if: env.IS_NEW == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: |
            ghcr.io/xstar97/rompatcherjs:$VERSION
            ghcr.io/xstar97/rompatcherjs:latest
          build-args: UPSTREAM_TAG=$VERSION

      # 5. Generate VERSION file and README.md from template
      - name: Update VERSION file and README
        if: env.IS_NEW == 'true'
        run: |
          echo "$VERSION" > VERSION
          sed "s|{{VERSION}}|$VERSION|g" README.template.md > README.md

      # 6. Commit README and VERSION changes
      - name: Commit README and VERSION update
        if: env.IS_NEW == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md VERSION
          git commit -m "chore: update README and VERSION to $VERSION" || echo "No changes"
          git push origin main

      # 7. Tag repo
      - name: Tag repo
        if: env.IS_NEW == 'true'
        run: |
          if git rev-parse "$VERSION" >/dev/null 2>&1; then
            echo "Tag $VERSION already exists. Skipping."
          else
            git config user.name "github-actions"
            git config user.email "github-actions@github.com"
            git tag $VERSION
            git push origin $VERSION

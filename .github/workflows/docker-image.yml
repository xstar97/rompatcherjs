name: Build and Push RomPatcher.js Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_URL_API: https://api.github.com/repos/marcrobledo/RomPatcher.js/releases/latest

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    outputs:
      built_version: ${{ steps.set_version.outputs.version }}  # Always outputs latest upstream tag

    steps:
      # ----------------------------------------------------------
      # 1. Checkout repository
      # ----------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v5

      # ----------------------------------------------------------
      # 2. Fetch the latest upstream release tag
      # ----------------------------------------------------------
      - name: Get latest upstream release
        id: set_version
        run: |
          LATEST=$(curl -s $REPO_URL_API | jq -r '.tag_name')
          echo "VERSION=$LATEST" >> $GITHUB_ENV
          echo "version=$LATEST" >> $GITHUB_OUTPUT
          echo "Latest upstream tag: $LATEST"

      # ----------------------------------------------------------
      # 3. Determine whether to build (skip if image/tag exists)
      # ----------------------------------------------------------
      - name: Check if Docker image or git tag exists
        id: check
        run: |
          SHOULD_BUILD=true

          # Check if Docker image already exists in GHCR
          if curl -s -f -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            https://ghcr.io/v2/${{ github.repository }}/manifests/${VERSION} > /dev/null; then
            echo "Docker image ${VERSION} exists. Skipping build."
            SHOULD_BUILD=false
          fi

          # Check if git tag already exists
          if git ls-remote --tags origin refs/tags/${VERSION} | grep -q ${VERSION}; then
            echo "Git tag ${VERSION} exists. Skipping build."
            SHOULD_BUILD=false
          fi

          echo "should_build=$SHOULD_BUILD" >> $GITHUB_OUTPUT

      # ----------------------------------------------------------
      # 4. Log in to GHCR (only if building)
      # ----------------------------------------------------------
      - name: Log in to GHCR
        if: steps.check.outputs.should_build == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------------------------
      # 5. Build and push Docker image (dynamic tags)
      # ----------------------------------------------------------
      - name: Build and push Docker image
        if: steps.check.outputs.should_build == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          no-cache: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: UPSTREAM_TAG=${{ env.VERSION }}

      # ----------------------------------------------------------
      # 6. Update README.md from template (only if building)
      # ----------------------------------------------------------
      - name: Update README
        if: steps.check.outputs.should_build == 'true'
        run: |
          sed "s|{{VERSION}}|${VERSION}|g" README.template.md > README.md

      # ----------------------------------------------------------
      # 7. Commit updated README.md (only if building)
      # ----------------------------------------------------------
      - name: Commit README
        if: steps.check.outputs.should_build == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add README.md
          git commit -m "chore: update README to ${VERSION}" || echo "No changes"
          git push origin main

      # ----------------------------------------------------------
      # 8. Summary step for skipped builds (UI notice)
      # ----------------------------------------------------------
      - name: Build summary
        if: steps.check.outputs.should_build == 'false'
        run: |
          echo "âœ… No new release detected. Workflow skipped building Docker image and updating README."
          echo "::notice title=Skipped Build::No new RomPatcher.js release detected. Docker image and README update were skipped."

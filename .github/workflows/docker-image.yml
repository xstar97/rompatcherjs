name: Build and Push RomPatcher.js Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_URL_API: https://api.github.com/repos/marcrobledo/RomPatcher.js/releases/latest

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v5

      # 2. Fetch latest upstream release
      - name: Get latest upstream release
        id: set_version
        run: |
          UPSTREAM_LATEST=$(curl -s $REPO_URL_API | jq -r '.tag_name')
          echo "UPSTREAM_LATEST=$UPSTREAM_LATEST" >> $GITHUB_ENV
          echo "Latest upstream release: $UPSTREAM_LATEST"

      # 3. Check if this tag already exists locally
      - name: Check if tag exists
        id: tag_check
        run: |
          if git rev-parse "refs/tags/${UPSTREAM_LATEST}" >/dev/null 2>&1; then
            echo "Tag ${UPSTREAM_LATEST} already exists. Exiting workflow."
            exit 0
          else
            echo "Tag ${UPSTREAM_LATEST} does not exist. Proceeding with build."
          fi

      # 4. Log in to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 5. Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          no-cache: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.UPSTREAM_LATEST }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: UPSTREAM_TAG=${{ env.UPSTREAM_LATEST }}

      # 6. Update README, commit, and tag
      - name: Commit README and Tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Update README
          sed "s|{{VERSION}}|${UPSTREAM_LATEST}|g" README.template.md > README.md
          git add README.md

          # Commit and push changes
          git commit -m "chore: update README to ${UPSTREAM_LATEST}" || echo "No changes"

          # Tag the upstream version
          git tag -a ${UPSTREAM_LATEST} -m "Release ${UPSTREAM_LATEST}" || echo "Tag already exists"

          git push origin main --tags

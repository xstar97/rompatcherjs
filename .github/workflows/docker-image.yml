name: Build and Push RomPatcher.js Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_URL_API: https://api.github.com/repos/marcrobledo/RomPatcher.js/releases/latest

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      # ----------------------------------------------------------
      # 1. Checkout repository (to check tags & update README)
      # ----------------------------------------------------------
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0   # needed for tags

      # ----------------------------------------------------------
      # 2. Fetch the latest upstream release tag
      # ----------------------------------------------------------
      - name: Get latest upstream release
        id: set_version
        run: |
          LATEST=$(curl -s $REPO_URL_API | jq -r '.tag_name')
          echo "LATEST=$LATEST" >> $GITHUB_ENV
          echo "version=$LATEST" >> $GITHUB_OUTPUT
          echo "Latest upstream tag: $LATEST"

      # ----------------------------------------------------------
      # 3. Determine if release is NEW compared to repo tags
      # ----------------------------------------------------------
      - name: Check if new release
        id: check
        run: |
          if git rev-parse "refs/tags/${LATEST}" >/dev/null 2>&1; then
            echo "Release ${LATEST} already handled."
            echo "new_release=false" >> $GITHUB_OUTPUT
          else
            echo "New release ${LATEST} detected!"
            echo "new_release=true" >> $GITHUB_OUTPUT
          fi

      # ----------------------------------------------------------
      # 4. Log in to GHCR (only if new release)
      # ----------------------------------------------------------
      - name: Log in to GHCR
        if: steps.check.outputs.new_release == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # ----------------------------------------------------------
      # 5. Build and push Docker image (dynamic tags)
      # ----------------------------------------------------------
      - name: Build and push Docker image
        if: steps.check.outputs.new_release == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          no-cache: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.LATEST }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: UPSTREAM_TAG=${{ env.LATEST }}

      # ----------------------------------------------------------
      # 6. Create git tag for this release
      # ----------------------------------------------------------
      - name: Create Git Tag
        if: steps.check.outputs.new_release == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git tag -a ${LATEST} -m "Release ${LATEST}"
          git push origin ${LATEST}

      # ----------------------------------------------------------
      # 7. Update README.md from template
      # ----------------------------------------------------------
      - name: Update README
        if: steps.check.outputs.new_release == 'true'
        run: |
          sed "s|{{VERSION}}|${LATEST}|g" README.template.md > README.md
          git add README.md
          git commit -m "chore: update README to ${LATEST}" || echo "No changes"
          git push origin main

      # ----------------------------------------------------------
      # 8. Summary if no new release
      # ----------------------------------------------------------
      - name: Skipped Summary
        if: steps.check.outputs.new_release == 'false'
        run: |
          echo "::notice title=Skipped Build::No new RomPatcher.js release detected."

name: Build and Push RomPatcher.js Docker Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * *' # Daily at 02:00 UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_URL_API: https://api.github.com/repos/marcrobledo/RomPatcher.js/releases/latest

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      # 1. Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v5

      # 2. Fetch latest upstream release
      - name: Get latest upstream release
        id: set_version
        run: |
          UPSTREAM_LATEST=$(curl -s $REPO_URL_API | jq -r '.tag_name')
          echo "UPSTREAM_LATEST=$UPSTREAM_LATEST" >> $GITHUB_ENV
          echo "Latest upstream release: $UPSTREAM_LATEST"

      # 3. Pre-check for updates (upstream or local commits)
      - name: Check for updates
        id: precheck
        run: |
          UPSTREAM=${UPSTREAM_LATEST}

          # Find latest combined tag for this upstream version
          LAST_TAG=$(git tag --list "${UPSTREAM}_v*" | sort -V | tail -n 1)

          if [ -z "$LAST_TAG" ]; then
            echo "No prior combined tag exists. Will build."
            echo "HAS_UPDATES=true" >> $GITHUB_ENV
          else
            LAST_UPSTREAM=${LAST_TAG%%_v*}
            if [ "$LAST_UPSTREAM" != "$UPSTREAM" ]; then
              echo "Upstream changed since last tag ($LAST_TAG). Will build."
              echo "HAS_UPDATES=true" >> $GITHUB_ENV
            else
              # Check for new commits since last combined tag
              NEW_COMMITS=$(git log ${LAST_TAG}..HEAD --oneline)
              if [ -z "$NEW_COMMITS" ]; then
                echo "No new commits and upstream unchanged. Skipping build."
                echo "HAS_UPDATES=false" >> $GITHUB_ENV
              else
                echo "New commits detected since last tag ($LAST_TAG). Will build."
                echo "HAS_UPDATES=true" >> $GITHUB_ENV
              fi
            fi
          fi

      # 4. Determine combined version (only if updates exist)
      - name: Determine combined version
        if: env.HAS_UPDATES == 'true'
        id: combined
        run: |
          UPSTREAM=${UPSTREAM_LATEST}

          # Latest local version
          LAST_LOCAL=$(git tag --list "${UPSTREAM}_v*" | sort -V | tail -n 1)
          if [ -n "$LAST_LOCAL" ]; then
            LOCAL_VER=${LAST_LOCAL##*_v}
            COMMITS=$(git log ${LAST_LOCAL}..HEAD --pretty=format:"%s")
          else
            LOCAL_VER="0.0.0"
            COMMITS=$(git log --pretty=format:"%s")
          fi

          echo "Current local version: $LOCAL_VER"

          # Default bump = patch
          BUMP="patch"

          if echo "$COMMITS" | grep -qi "BREAKING CHANGE"; then
            BUMP="major"
          elif echo "$COMMITS" | grep -qi "^feat"; then
            BUMP="minor"
          elif echo "$COMMITS" | grep -qi "^fix"; then
            BUMP="patch"
          fi

          # Semver bump
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LOCAL_VER"
          case $BUMP in
            major) MAJOR=$((MAJOR+1)); MINOR=0; PATCH=0 ;;
            minor) MINOR=$((MINOR+1)); PATCH=0 ;;
            patch) PATCH=$((PATCH+1)) ;;
          esac

          # Start at v0.0.1 if new upstream
          if [ "$LOCAL_VER" = "0.0.0" ]; then
            PATCH=1
          fi

          NEW_LOCAL="${MAJOR}.${MINOR}.${PATCH}"
          NEW_TAG="${UPSTREAM}_v${NEW_LOCAL}"

          # Increment patch until unique in remote
          while git ls-remote --tags origin "refs/tags/${NEW_TAG}" | grep -q "${NEW_TAG}"; do
            PATCH=$((PATCH+1))
            NEW_LOCAL="${MAJOR}.${MINOR}.${PATCH}"
            NEW_TAG="${UPSTREAM}_v${NEW_LOCAL}"
          done

          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          echo "BUMP=$BUMP" >> $GITHUB_ENV
          echo "Combined version: $NEW_TAG"

      # 5. Log in to GitHub Container Registry
      - name: Log in to GHCR
        if: env.HAS_UPDATES == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 6. Build and push Docker image
      - name: Build and push Docker image
        if: env.HAS_UPDATES == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          no-cache: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.NEW_TAG }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          build-args: UPSTREAM_TAG=${{ env.UPSTREAM_LATEST }}

      # 7. Update README, commit, and tag
      - name: Commit README and Tag
        if: env.HAS_UPDATES == 'true'
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          # Update README
          sed "s|{{VERSION}}|${NEW_TAG}|g" README.template.md > README.md
          git add README.md

          # Commit with bump type
          git commit -m "chore: update README to ${NEW_TAG} (${BUMP} bump)" || echo "No changes"

          # Annotated tag with bump type
          git tag -a ${NEW_TAG} -m "Release ${NEW_TAG} (${BUMP} bump)" || echo "Tag already exists"

          # Push commit and tags
          git push origin main --tags
